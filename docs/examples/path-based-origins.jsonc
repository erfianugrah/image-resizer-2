/**
 * Comprehensive Path-Based Origins Configuration Example
 * 
 * This file shows examples of different authentication methods for path-based origins.
 */
{
  "storage": {
    // Top-level storage configuration (used as fallback when no path matches)
    "priority": ["r2", "remote", "fallback"],
    "remoteUrl": "https://default.example.com/images",
    "fallbackUrl": "https://backup.example.com/images",
    "r2": {
      "enabled": true,
      "bindingName": "MAIN_IMAGES_BUCKET"
    },
    
    // Top-level authentication settings (inherited by path configs that don't override)
    "remoteAuth": {
      "enabled": true,
      "type": "bearer",
      "tokenHeaderName": "Authorization",
      "tokenSecret": "${GLOBAL_API_TOKEN}" // Set via environment variable
    },
    
    "auth": {
      "useOriginAuth": true,
      "sharePublicly": true,
      "securityLevel": "permissive"
    },
    
    // Path-based origins configuration with comprehensive authentication examples
    "pathBasedOrigins": {
      // Example 1: Bearer token authentication
      "productImages": {
        "pattern": "products/",
        "priority": ["remote", "r2", "fallback"],
        "remoteUrl": "https://products.example.com/images",
        "remoteAuth": {
          "enabled": true,
          "type": "bearer",
          "tokenHeaderName": "Authorization",
          "tokenSecret": "${PRODUCT_API_TOKEN}" // Set via environment variable
        },
        "fetchOptions": {
          "headers": {
            "X-Product-API": "true"
          }
        }
      },
      
      // Example 2: R2 storage with strict auth settings
      "userUploads": {
        "pattern": "uploads/",
        "priority": ["r2", "fallback"],
        "r2": {
          "enabled": true,
          "bindingName": "USER_UPLOADS_BUCKET"
        },
        "auth": {
          "useOriginAuth": true,
          "sharePublicly": false,
          "securityLevel": "strict" // Override top-level setting
        },
        "pathTransforms": {
          "uploads": {
            "prefix": "user-content/",
            "removePrefix": true
          }
        }
      },
      
      // Example 3: Public content with explicitly disabled auth
      "staticAssets": {
        "pattern": "assets/",
        "priority": ["remote"],
        "remoteUrl": "https://cdn.example.com/static",
        "remoteAuth": {
          "enabled": false // Explicitly disable auth for public content
        },
        "auth": {
          "useOriginAuth": false,
          "sharePublicly": true
        }
      },
      
      // Example 4: Default auth inheritance
      "profilePictures": {
        "pattern": "profiles/",
        "priority": ["r2", "remote", "fallback"],
        // No auth specified - inherits from top-level config
        "pathTransforms": {
          "profiles": {
            "prefix": "avatars/",
            "removePrefix": true
          }
        }
      },
      
      // Example 5: AWS S3 authentication
      "privateMedia": {
        "pattern": "private/",
        "priority": ["remote"],
        "remoteUrl": "https://private-bucket.s3.amazonaws.com",
        "remoteAuth": {
          "enabled": true,
          "type": "aws-s3",
          "region": "us-east-1",
          "service": "s3",
          "accessKeyVar": "PRIVATE_AWS_ACCESS_KEY",
          "secretKeyVar": "PRIVATE_AWS_SECRET_KEY"
        },
        "auth": {
          "useOriginAuth": true,
          "sharePublicly": false,
          "securityLevel": "strict"
        }
      },
      
      // Example 6: Custom headers authentication
      "partnerContent": {
        "pattern": "partners/",
        "priority": ["remote"],
        "remoteUrl": "https://partner-api.example.com/content",
        "remoteAuth": {
          "enabled": true,
          "type": "header",
          "headers": {
            "X-API-Key": "${PARTNER_API_KEY}", // Set via environment variable
            "X-Partner-ID": "image-resizer",
            "X-Subscription-Tier": "premium"
          }
        }
      },
      
      // Example 7: Query parameter authentication (signed URLs)
      "temporaryAccess": {
        "pattern": "temp/",
        "priority": ["remote"],
        "remoteUrl": "https://temporary-access.example.com",
        "remoteAuth": {
          "enabled": true,
          "type": "query",
          "signedUrlExpiration": 300, // 5 minutes 
          "tokenSecret": "${TEMP_ACCESS_SECRET}" // Set via environment variable
        }
      },
      
      // Example 8: Different auth methods for primary and fallback sources
      "multiSource": {
        "pattern": "multi/",
        "priority": ["remote", "fallback"],
        "remoteUrl": "https://primary.example.com/images",
        "fallbackUrl": "https://backup.example.com/images", 
        "remoteAuth": {
          "enabled": true,
          "type": "bearer",
          "tokenHeaderName": "Authorization",
          "tokenSecret": "${PRIMARY_API_TOKEN}"
        },
        "fallbackAuth": {
          "enabled": true,
          "type": "aws-s3",
          "region": "us-west-2",
          "service": "s3",
          "accessKeyVar": "BACKUP_AWS_ACCESS_KEY",
          "secretKeyVar": "BACKUP_AWS_SECRET_KEY"
        }
      },
      
      // Example 9: Partial override of top-level settings
      "partialOverride": {
        "pattern": "partial/",
        "priority": ["remote", "r2"],
        "remoteUrl": "https://api.example.com/partial",
        "remoteAuth": {
          "type": "bearer", // Only override the type
          "tokenHeaderName": "X-Auth-Token" // Only override the header name
          // Other settings inherited from top-level config:
          // - enabled: true (from top-level)
          // - tokenSecret: ${GLOBAL_API_TOKEN} (from top-level)
        }
      }
    }
  },
  
  // Related R2 bucket bindings
  "r2_buckets": [
    {
      "binding": "MAIN_IMAGES_BUCKET",
      "bucket_name": "main-images",
      "preview_bucket_name": "main-images-dev"
    },
    {
      "binding": "USER_UPLOADS_BUCKET",
      "bucket_name": "user-uploads",
      "preview_bucket_name": "user-uploads-dev" 
    }
  ]
}